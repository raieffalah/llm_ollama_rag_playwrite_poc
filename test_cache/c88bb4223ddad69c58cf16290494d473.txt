```typescript
import { test, expect } from '@playwright/test';
import { Page } from './page-object';

test('Add Todo Functionality - Empty Input Validation', async ({ page }) => {
    // Create a new instance of the TodoApp class
    const todoApp = new Page(page);

    // Navigate to the Todo App page
    await todoApp.navigateTo();

    // Enter empty input and press enter key
    await todoApp-enterEmptyInput();

    // Verify that there is no new todo item added
    await todoApp.verifyNoNewTodoItemAdded();
});

// Page Object class for the Todo App
class Page {
    constructor(page) {
        this.page = page;
    }

    // Navigate to the Todo App page
    async navigateTo() {
        await this.page.goto('https://todo-app.example.com');
    }

    // Enter empty input and press enter key
    async enterEmptyInput() {
        const todoInput = this.page.locator('[data-test="input-todo"]');
        await todoInput.type(' ');
        await todoInput.press('Enter');
    }

    // Verify that there is no new todo item added
    async verifyNoNewTodoItemAdded() {
        const todosList = this.page.locator('[data-test="todos-list"]');
        const todosItemsCount = await todosList.count();
        expect(todosItemsCount).toBe(0);
    }
}
```

In the code above, we first import necessary modules from `@playwright/test` and create a new instance of the `Page` class for our Todo App.

The `navigateTo` method is used to navigate to the Todo App page. We assume that this method checks if the Todo App page has loaded correctly by checking its title or content.

In the `enterEmptyInput` method, we use the `page.locator` function to select the todo input field and press the enter key on it. We expect the todo app not to add a new todo item because of empty input.

Finally, in the `verifyNoNewTodoItemAdded` method, we verify that there are no todos items by checking their count using the `count` method provided by Playwright.